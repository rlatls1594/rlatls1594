# 교안 Python 기초(2주차).pdf / p12. 

# [ for 반복문 ]
# - 주어진 반복 횟수에 따라 for의 종속 문장을 반복 실행한다.
# - 변수를 정의하고, 범위를 설정하여 반복 횟수를 결정
# - Range 함수 : range(시작값, 종료값, 증감값) 형식으로 사용
# - 시작값, 증감값은 생략이 가능

# >> for 반복문
# - 기본 사용법
# for 변수명 in range(반복횟수) : 
# 	수행 코드
# 	수행 코드
# 수행 코드

# > range()함수
# - range 함수 응용

# range(종료값)
# -> 시작값, 증감값은 생략이 가능하다
# range(시작값, 종료값)
# -> 증감값은 생략이 가능하다
# range(시작값, 종료값, 증가값)

# > range() 함수 (예제)
# for x in range(10): 
# 	print( x, end=' ')
# for x in range(5,10) : 
# 	print( x, end=' ')
# for x in range(1,10,2):
# 	print( x, end=' ')
# for x in range(10,0,-1):
# 	print( x, end=' ')


# [예제.1]
# for i in range(0,10,1):
#   print("For문 출력")
# -> 종료값 10이 될 때 까지 i 변수는 1씩 증가, 0 -> 1 , 1 -> 2 , 2 -> 3 ~ 8 -> 9 까지 / 0 ~ 9 까지
# -> 종료값 10이 될 때 까지 i 변수는 1씩 증가하고, 계속 print로 출력 / 0 ~ 9 까지

# for i in range(10,0,-1):
#   print("For문 출력")
# -> 종료값이 0이 될 때 까지 i 변수는 -1씩 감소, 10 -> 9 , 9 -> 8 , 8 -> 7 ~ 1 까지 / 10 ~ 1 까지
# -> 종료값이 0이 될 때 까지 i 변수는 -1씩 감소하고, 계속 print로 출력 / 10 ~ 1 까지

# for i in range(5,10):
#   print(i)

# for i in range(10):
#   print(i)
# 선생님이 제일 많이 쓰는 형식
# 단순히 반복횟수를 명시하고 싶으면 가장 많이 사용하는 방법

# for i in range(10):
#   print(i, end=" ")
# range 함수는 기본적으로 \n , 줄바꿈 코드가 생략되어 있다.
# 따라서 줄 바꿈 코드를 적용하지 않고 한 줄에 출력하고 싶으면 end=" " 코드를 입력해서 한 줄에 출력 할 수 있다.

# for i in range(10):
#   print(i, end=" ")
# print("다음 라인 출력")

# for i in range(10):
#   print(i, end=" ")
# print("\n다음 라인 출력")
# 줄 바꿈 코드를 적용 X , 한 줄 출력 시 종속 문장이 아니더라도 적용된다. 
# 따라서 다음 줄에서 줄 바꿈 적용하려면 \n, 줄바꿈 코드를 입력해줘야 한다

# for i in range(10):
#   print(i, end="* " * i)
#   print() 
# 이런 것도 가능하다. * 문자 대신 아무 문자나 가능

# var = int(input("반복횟수 입력: "))
# for i in range(var):
#   print(i+1,"번 반복")
# 숫자 입력 시 입력한 n 만큼 반복

# for ch in "String":
#   print(ch)
# 문자열 갯수 만큼 출력

# lst = [1,2,3,4,5]
# for i in lst:
#   print(i)
# Python for문에서 가장 많이 사용하는 방법
# 실제 숫자값을 지정하는 경우는 거의 없다.
# 데이터 갯수에 따른 반복이 많다.


# [ Quiz ]
# 1. 1 ~ 10 까지 합을 구하세요. 단, 반복 문을 이용하세요.

# 2. For문과 IF문을 이용하여 아래와 같이 출력.
# - 힌트 : 5번 출력하고 줄 바꿈이 이루어져야 하므로, 5의 배수마다 줄 바꿈 처리하도록 조건을 설정한다.
# 1     2       3       4       5
# 6     7       8       9      10
# 11   12      13      14      15
# 16   17      18      19      20
# 21   22      23      24      25
# 26   27      28      29      30

# 3. 변수 st = 'It is a fun Python class' 다음 문자열 중에서 
# 알파벳 'a'의 개수와 's'의 개수를 구하시오.

# 4. 수를 입력 받아 1 ~ 입력 받은 수 까지 짝수의 합과 홀수의 합을 출력 하시오.

# 5. 시작 값, 끝 값, 증가값(1) 입력받아 시작과 끝값 사이의 7의 배수를 출력 하시오.

# 6. 1 ~ 100 사이의 값 중 3의 배수 이며, 5의 배수에 해당하는 합을 구하시오.

# 7. 두 수를 입력 받아 입력 받은 두 수의 범위 안의 합을 구하시오.

# 8. 첫날에 10원을 예금하고, 다음날에는 전날의 2배를 예금하는 방식으로
# 한달(30일) 동안 저축한 금액을 구하시오.
# (첫날 10, 둘째날 20 , 셋째날 40 . . .무조건 2배씩 증가되는 값이다)

# -> 풀이 코드
# 1. 1 ~ 10 까지 합을 구하세요. 단, 반복 문을 이용하세요.
# total = 0
# for i in range(1, 11):
#     total += i

# print("1부터 10까지 합:", total)

# 선생님 코드
# sum = 0
# for i in range (1,11,1):
#    sum += i
# print("1부터 10까지의 합은 {}입니다.".format(sum))

# 1 ~ 10 까지니까 시작값 : 1 , 종료값 : 11 
# total, 합계를 0 으로 지정, for문 안에 i 변수 지정
# 0 은 total 변수를 사용하기 전에 반드시 할당 해야하는 값으로 더하기 누적을 시작하려면 0으로 초기화(덧셈 항등원)
# total += i 는 Python의 증강 할당 연산자로 total = total + i와 같다.
# 반복문 안에서 i를 계속 더해 나갈 때 유용하다.


# 2. For문과 IF문을 이용하여 아래와 같이 출력.
# - 힌트 : 5번 출력하고 줄 바꿈이 이루어져야 하므로, 5의 배수마다 줄 바꿈 처리하도록 조건을 설정한다.
# 1     2       3       4       5
# 6     7       8       9      10
# 11   12      13      14      15
# 16   17      18      19      20
# 21   22      23      24      25
# 26   27      28      29      30
# for i in range(1, 31):
#     print(f"{i:2}", end=" ")
#     if i % 5 == 0:
#         print()  

# 선생님 코드
# for i in range (1,31,1):
#    print("{}\t".format(i),end='')
#    if i % 5 == 0:
#       print()
# {}.format() 형식 사용

# 1 ~ 30까지 출력되어야하므로 시작값 : 1 , 종료값 : 31
# 5의 배수마다 줄 바꿈 처리 하도록 조건을 설정하려면 첫 번째 print에 줄 바꿈 코드 대신 end=" " 사용
# for문과 if문을 사용해야하므로 for문 안에 if문 사용, 5의 배수이므로 %5 == 0: 으로 설정
# 마지막 print는 5번째마다, 5의 배수마다 줄바꿈 해야하므로 print()
# print() 처럼 인자 없이 호출하면 자동으로 \n, 줄바꿈(새로운 빈 줄)을 출력


# 3. 변수 st = 'It is a fun Python class' 다음 문자열 중에서 
# 알파벳 'a'의 개수와 's'의 개수를 구하시오.
# st = 'It is a fun Python class'
# count_a = 0
# count_s = 0

# for ch in st:
#     if ch == 'a':
#         count_a += 1
#     elif ch == 's':
#         count_s += 1

# print("'a' 개수:", count_a)
# print("'s' 개수:", count_s)

# 선생님 코드
# st = "It is a fun Python class"
# a = s = 0
# for i in st:
#    if i == 'a':
#       a+=1
#    elif i == 's':
#       s+=1
# print("a의 개수: {} , s의 개수: {}".format(a,s))

# a와 s의 갯수가 몇 개인지 컴퓨터가 구해야함 -> 덧셈 항등원 0 으로 초기화 설정
# 문자열 a의 갯수와 s의 갯수를 구해야하므로 ch == 'a': , ch == 's': 로 설정
# for문 안에 if문과 elif 사용으로 a 와 s 의 갯수를 구함
# count_a += 1 -> count_a = count_a + 1
# count_s += 1 -> count_s = count_s + 1
# Python은 문자열 비교연산도 가능하다


# 4. 수를 입력 받아 1 ~ 입력 받은 수 까지 짝수의 합과 홀수의 합을 출력 하시오.
# n = int(input("숫자를 입력하세요: "))
# even_sum = 0
# odd_sum = 0

# for i in range(1, n+1):
#     if i % 2 == 0:
#         even_sum += i
#     else:
#         odd_sum += i

# print("짝수의 합:", even_sum)
# print("홀수의 합:", odd_sum)

# 선생님 코드 
# num1 = int(input("종료 값 입력:"))
# evensum,oddsum = 0,0
# for i in range (1, num1+1, 1):
#    if i % 2 == 0:
#       evensum+=i
#    else:
#       oddsum+=i
# print("1에서 {} 까지 짝수의 합 : {}".format(num1,evensum))
# print("1에서 {} 까지 홀수의 합 : {}".format(num1,oddsum))

# 짝수의 합 변수 지정 even_sum
# 홀수의 합 변수 지정 odd_sum
# 숫자를 입력 받아 "받은 수 까지" 합을 출력해야하니까 입력 받는 수 n +1
# 짝수는 2로 나눴을 때 나머지가 0 이니 % 2 == 0:
# 나머지는 홀 수 이므로 else: 
# 마지막으로 "짝수의 합" 과 "홀수의 합" 출력


# 5. 시작 값, 끝 값, 증가값(1) 입력받아 시작과 끝값 사이의 7의 배수를 출력 하시오.
# start = int(input("시작 값: "))
# end = int(input("끝 값: "))
# step = 1  # 문제 조건상 고정

# for i in range(start, end+1, step):
#     if i % 7 == 0:
#         print(i, end=" ")

# print()

# 선생님 코드
# s = int(input("시작값:"))
# e = int(input("종료값:"))
# g = int(input("증가값:"))
# for i in range(s,e,g):
#    if i % 7 == 0:
#       print(i,end='')

# 시작값, 끝값, 증가값(1) 변수 설정
# 시작값과 끝값 사이 이므로 끝값이 포함되어야함 -> end + 1
# 7의 배수를 출력해야하므로 % 7 == 0:


# 6. 1 ~ 100 사이의 값 중 3의 배수 이며, 5의 배수에 해당하는 합을 구하시오.
# total = 0
# for i in range(1, 100+1):
#     if i % 15 == 0:
#         total += i

# print("3과 5의 공배수(15)의 합:", total)

# total = 0
# for i in range(1, 100+1):
#     if i % 3 == 0:
#         if i % 5 == 0:
#             total += i
# print(total)

# total = 0
# for i in range(1, 100+1):
#     if i % 3 == 0: and if i % 5 == 0:
#             total += i
# print(total)
# and로 묶어 줄 수도 있다

# 선생님 코드
# sum=0
# for i in range(1,100,1):
#    if i % 3 == 0:
#       if i % 5 ==0:
#          sum+=i
# print(sum)

# 3의 배수이며, 5의 배수는 15의 배수, 공배수를 구하는 문제(이런 것까지 해야하나?)
# 공배수를 구하기 싫으면, 생각하지 못했다면 if문을 사용해서 3의 배수, if문 안에 if문으로 5의 배수를 중첩 구조로 구해야 함 
# 1 ~ 100 사이 값이므로 1 ~ 100 포함 / 시작값은 1 , 종료값은 100+1 또는 101 로 설정 (101은 사람의 계산이 필요)
# total += i -> total = i + 1


# 7. 두 수를 입력 받아 입력 받은 두 수의 범위 안의 합을 구하시오.
# a = int(input("첫 번째 수: "))
# b = int(input("두 번째 수: "))

# if a > b:
#     a, b = b, a  # 서로 바꿔서 항상 a ≤ b

# total = 0
# for i in range(a, b+1):
#     total += i

# print(f"{a}에서 {b}까지 합:", total)
# print("{}에서 {}까지 합: ".format(a,b))

# a = int(input("첫 번째 수: "))
# b = int(input("두 번째 수: "))
# total = 0
# for i in range(a, b+1):
#     total += i
# print(total)

# 선생님 코드
# su1 = int(input("start:"))
# su2 = int(input("end:"))
# sum = 0
# for i in range(su1,su2+1):
#    sum+=i
# print(sum)

# 두 수의 범위 안의 합을 구해야하므로 a , b+1
# 두 수 a , b는 a가 시작값 / b가 종료값이 되어야 하므로 b는 a보다 같거나 커야한다.
# 따라서 a가 b보다 크다면, a 와 b는 = b와 a 와 같아야한다.
# a 가 b보다 작다라는 가정을 굳이 안해도 상식 선에서 문제를 풀 수 있기는 하지만 값을 잘못 입력했을 때 나는 오류는... 


# 8. 첫날에 10원을 예금하고, 다음날에는 전날의 2배를 예금하는 방식으로
# 한달(30일) 동안 저축한 금액을 구하시오.
# (첫날 10, 둘째날 20 , 셋째날 40 . . .무조건 2배씩 증가되는 값이다)
# first_day = 10
# total = 0

# for day in range(1, 30+1):
#     total += first_day
#     first_day *= 2

# print("30일간 총 저축액:", total, "원")

# 선생님 코드
# won = 10
# Sum = 0
# for day in range(1,31):
#    Sum += won
#    won *= 2
# print(Sum)

# 첫날 10원 기준 무조건 2배씩 증가되므로 first_day *= 2
# 10737418230원 이 이게 말이 되나? 107억인데?????????????????????
#    won *= 2
#    Sum += won
# 코드의 순서만 바뀌어도 값이 완전 달라진다
# 첫날 금액을 저장(합계에 더함)하고 2배 증가 시켜야하는데, 코드를 바꾸면 2배 증가 시키고 금액을 저장(합계에 더함)



# > 중첩 for 반복문
# for x in range (반복횟수) : 
# 	for y in range(반복횟수) : 
# 		수행 코드
# 	수행 코드
# 수행 코드
# -> 상위 for문에서 10회 반복 , 종속 for문에서 10회 반복 시, 총 수행 코드는 100번 반복
# -> x = 0 / 반복횟수 : 5회 인 경우
# -> y = 0 / 반복횟수 : 3회 인 경우
# -> y = 0 , 1 , 2 , 3 -> 다시 위로 올라가서 x가 1이 되고 다시 실행
# -> 위와 같은 식으로 x가 5가 될 때까지 반복
# -> 헷갈리고 귀찮고 오래걸려서 그렇지 해석을 못할 정도는 아니다
# -> 옆에 새로운 매모장 켜놓고 적어가면서 해석하게되면 다 해석 할 수 있다.

# [예제.2]
# for x in range(1,4,1):
#     for y in range(1,6,1):
#         print("X:{} / Y:{}".format(x,y))
#     print("")


# [ Quiz 1 ] : 중첩 For문을 이용하여 아래 구구단 표를 작성하세요. (가로 출력)
# 2×1= 2   2×2= 4   2×3= 6   2×4= 8   2×5=10   2×6=12   2×7=14   2×8=16   2×9=18   
# 3×1= 3   3×2= 6   3×3= 9   3×4=12   3×5=15   3×6=18   3×7=21   3×8=24   3×9=27
# 4×1= 4   4×2= 8   4×3=12   4×4=16   4×5=20   4×6=24   4×7=28   4×8=32   4×9=36
# 5×1= 5   5×2=10   5×3=15   5×4=20   5×5=25   5×6=30   5×7=35   5×8=40   5×9=45
# 6×1= 6   6×2=12   6×3=18   6×4=24   6×5=30   6×6=36   6×7=42   6×8=48   6×9=54
# 7×1= 7   7×2=14   7×3=21   7×4=28   7×5=35   7×6=42   7×7=49   7×8=56   7×9=63
# 8×1= 8   8×2=16   8×3=24   8×4=32   8×5=40   8×6=48   8×7=56   8×8=64   8×9=72
# 9×1= 9   9×2=18   9×3=27   9×4=36   9×5=45   9×6=54   9×7=63   9×8=72   9×9=81

# for x in range(2, 10, 1):
#     for y in range(1, 10, 1):
#         print(f"{x}×{y}={x*y}", end=" ")
#     print()

# range(2, 10, 1): -> 2단부터 9단까지
# range(1, 10, 1): -> 1 부터 9 까지 곱하기
# print()로 각 단마다 줄 바꿈
# f스트링 - print(f"{x} × {y} = {x*y:2}", end=" ") 
# {}.format() - print("{} x {} = {}\t".format(i,x,i*x), end=" ") 

# [ Quiz 2 ] : 중첩 For문을 이용하여 아래 구구단 표를 작성하세요. (세로 출력)
# 2×1= 2   3×1= 3   4×1= 4   5×1= 5   6×1= 6   7×1= 7   8×1= 8   9×1= 9   
# 2×2= 4   3×2= 6   4×2= 8   5×2=10   6×2=12   7×2=14   8×2=16   9×2=18
# 2×3= 6   3×3= 9   4×3=12   5×3=15   6×3=18   7×3=21   8×3=24   9×3=27
# 2×4= 8   3×4=12   4×4=16   5×4=20   6×4=24   7×4=28   8×4=32   9×4=36
# 2×5=10   3×5=15   4×5=20   5×5=25   6×5=30   7×5=35   8×5=40   9×5=45
# 2×6=12   3×6=18   4×6=24   5×6=30   6×6=36   7×6=42   8×6=48   9×6=54
# 2×7=14   3×7=21   4×7=28   5×7=35   6×7=42   7×7=49   8×7=56   9×7=63
# 2×8=16   3×8=24   4×8=32   5×8=40   6×8=48   7×8=56   8×8=64   9×8=72
# 2×9=18   3×9=27   4×9=36   5×9=45   6×9=54   7×9=63   8×9=72   9×9=81

# for y in range(1, 10):
#     for x in range(2, 10):
#         print(f"{x}×{y}={x*y}", end=" ")
#     print()  
    
# range(1, 10, 1) -> 1 부터 9 까지 곱하기
# range(2, 10, 1) -> 2 단 부터 9 단 까지
# print()로 한 행을 다 채우고 줄바꿈
# 절대 2단을 아래로 쭉 끝내고 다시 위로 올라와서 3단을 쭉 끝낼 수 없다
# 2단, 3단, ... 9단의 곱하기 1을 먼저 끝내야한다
# 잘 살펴보면 for문에 사용된 변수 x 와 y 의 위치가 다른 것을 확인 할 수 있다.

# [ while 반복문 ]
# - 조건식이 참인 동안 종속코드를 반복 실행한다.
# - 주로 반복횟수가 명확하게 정해지지 않는 경우 사용

# > while 반복문
# - 기본 사용 법
# while 조건문 : 
# 	수행 코드
# 	수행 코드
# 수행 코드

# - 비교 연산자 사용
# while x < 10 :
# 	수행 코드
# 	x = x + 1
# 수행 코드


# [예제.3]
# i = 1
# odd = even = 0
# while i <= 10:
#   if i % 2 == 0:
#     even += i
#   else:
#     odd += i
# print("1~10 짝수의 합: ", even)
# print("1~10 홀수의 합: ", odd)
# 이 상태에서 실행하면 계속 실행됨. 안끝남. (터미널창에서 ctrl + c 로 취소)
# 종속문 안 어딘가에서는 반드시 거짓이 될 때까지 만들어줘야한다
# 즉, i 값을 변경해줘야한다

# i = 1
# odd = even = 0
# while i <= 10:
#   if i % 2 == 0:
#     even += i
#   else:
#     odd += i
#   i += 1
# print("1~10 짝수의 합: ", even)
# print("1~10 홀수의 합: ", odd)
# i = 1 이 시작값 , i <= 10: 이 종료값 , i += 1이 증가값
# 이런 구조라면 그냥 range 사용해서 for문 사용하는 것이 편하다
# 반복 횟수가 명확하게 주어지지 않은 경우 가끔 사용


# - 무한 반복
# while True : 
# 	수행 코드
# 	수행 코드
# 수행 코드

# - break, 반복의 종료 
# while True : 
# 	수행 코드
# 	break
# 	수행 코드
# 수행 코드

# - continue, 반복의 처음으로 이동
# while True : 
# 	수행 코드
# 	continue
# 	수행 코드
# 수행 코드

# - 중첩 반복문에서의 break, continue
# while True : 
# 	수행 코드
# 	while True : 
# 		break
# 	수행 코드
# 수행 코드

# while True : 
# 	수행 코드
# 	while True : 
# 		continue
# 	수행 코드
# 수행 코드

# while True: # -->> 이런 표현도 가능 while 1:  -> 0 은 거짓, 1은 참
#   data = int(input("10보다 작은 정수 입력: "))
#   if data < 10:
#     print("10보다 작은값 입력")
#     break
#   else:
#     print("다시 입력하세요!")
#     continue
# print("반복 종료")

# 반복 횟수가 정해져 있지 않은, 명확하지 않은 무한 반복 루프 구현
# while 조건식 이 보통의 경우이지만 while True를 사용해서 조건식이 무조건 참으로 만듦
# break 와 continue 같은 기타 제어문을 사용한다.
# break 는 즉시 빠져나온다
# continue는 즉시 while 조건식으로 간다
# 10보다 작은 값을 입력하면 break 로 즉시 반복 종료
# 10보다 큰 값을 입력하면 continue로 다시 반복
# continue는 주석처리해도 똑같이 작동한다
# continue는 코드를 조금 더 빠르게 실행 할 수 있게 도와준다
# continue를 주석처리 하게되면 뒤에 있는 코드들도 그대로 실행 된다

# i = 1
# while i<5:
#   print(i)
#   i+=1
# else:
#   print("while 조건식이 거짓일 경우 실행")
# while에도 else문을 사용할 수 있다


# [ 제어문 종합 Quiz ]
# [ Quiz .1 ] 
# 쌀 100통이 저장되어 있는 창고에 암수 1쌍의 쥐가 있다. 
# 쥐 한 마리가 하루에 20g씩의 쌀을 먹고, 10일 (10,20,30) 마다 쥐의 수가 2배씩 증가한다. 
# 며칠 만에 창고의 쌀이 모두 쥐의 먹이가 될까. 그리고 쥐는 총 몇 마리 인가? 
# ( 쌀 한 통 = 1kg ) ( 쌀을 먹은 후 2배 증가하는 조건 )


# [ Quiz .2 ] : 별 찍기, 홀수를 입력 받아 입력 받은 홀수 라인 만큼 마름모 형태의 별이 나타나도록 하세요.
# [ EX ] :홀수의 줄 수를 입력 : 5
#    ★
#  ★★★
# ★★★★★
#  ★★★
#    ★
# 힌트 : Flag ( 기준점 설정 하기 ) , 공백은 ( 감소 후 증가 ) , 별은 ( 증가 후 감소 ) , IF문 , For문을 활용 
# 공백의 시작은 전체 라인에서 나누기 2한 몫이 시작 값 , 별은 초기 값이 항상 1로 시작 된다. 
# Quiz 2를 누구의 도움도 받지 않고 풀었다면 선생님이 인정해주심. 

# -> 정답 및 풀이 코드
# [ Quiz .1 ] 
# 쌀 100통이 저장되어 있는 창고에 암수 1쌍의 쥐가 있다. 
# 쥐 한 마리가 하루에 20g씩의 쌀을 먹고, 10일 (10,20,30) 마다 쥐의 수가 2배씩 증가한다. 
# 며칠 만에 창고의 쌀이 모두 쥐의 먹이가 될까. 그리고 쥐는 총 몇 마리 인가? 
# ( 쌀 한 통 = 1kg ) ( 쌀을 먹은 후 2배 증가하는 조건 )
# male_mouse = 1
# female_mouse = 1
# mouse = male_mouse + female_mouse
# rice = 100 * 1000 # g단위, 100kg = 100000g
# day = 0

# while rice > 0:
#     day += 1
#     rice -= mouse * 20 # 하루 소비량 20g
#     if day % 10 == 0:
#         mouse *= 2 # 10일마다 번식(쌀 소비 후)

# print(f"쌀이 바닥난 날: {day}일")
# print(f"그때 쥐의 총 수: {mouse}마리")

# day, 일 수는 당연히 증가 / day += 1
# rice, 쌀은 쥐가 먹어버리니까 감소 / rice -= mouse * 20
# 10일 마다 쥐의 수가 2배씩 증가 , 10의 배수 일의 mouse *= 2 / day % 10 == 0 이면 mouse *= 2
# rice에 남은 쌀(g), mouse에 현재 쥐 수를 저장
# 쌀이 0 이 되면 루프 종료 후 day, mouse 출력

# -> 선생님 코드
# rice = 100000; mouse = 2; day=1; # 쌀을 KG -> G으로 단위 변환, 초기 쥐의 수와 날짜 정의
# while True: # 조건으로 100kg의 쌀이 0보다 작을 때 까지 반복
#   rice -= mouse*20 # 쌀의 무게에서 쥐의 수 * 20하여 줄어드는 쌀의 무게를 rice에 저장
#   if day%10 ==0: # 만약 날짜가 10의 배수일 때 쥐의 수는 2배 증가
#     mouse *= 2 # 기존 쥐의 수 * 2배 
#   if rice <= 0: # 쌀의 무게가 0g이 될 경우 while문 종료
#     break
#   day+=1 # 한번 반복할 때 마다, 날짜 증가
# print(day,'일',mouse,'마리')


# for문, 반복문 예제 중 가장 많이 나오는 문제
# [ Quiz .2 ] : 별 찍기, 홀수를 입력 받아 입력 받은 홀수 라인 만큼 마름모 형태의 별이 나타나도록 하세요.
# [ EX ] :홀수의 줄 수를 입력 : 5
#    ★
#  ★★★
# ★★★★★
#  ★★★
#    ★
# 힌트 : Flag ( 기준점 설정 하기 ) , 공백은 ( 감소 후 증가 ) , 별은 ( 증가 후 감소 ) , IF문 , For문을 활용 
# 공백의 시작은 전체 라인에서 나누기 2한 몫이 시작 값 , 별은 초기 값이 항상 1로 시작 된다. 

# odd_line 이 홀수라고 가정 
# Flag(기준점) = odd_line // 2
# // 나누기 두 개는 정수연산

# 위쪽 절반(0부터 Flag):
# i번째 줄의 공백 = Flag - i
# 별 개수는 홀수 개, 항상 1로 시작 = 2 * i + 1

# 아래쪽 절반(Flag-1부터 0까지):
# i번째 줄의 공백 = Flag - i
# 별 개수는 홀수 개, 항상 1로 시작 = 2 * i + 1

# odd_line = int(input("홀수 줄 수를 입력하세요: "))
# Flag = odd_line // 2
# i = 0

# 윗부분 (0 ~ Flag)
# for i in range(0, Flag + 1, 1):
#     spaces_line = Flag - i
#     stars_count = 2 * i + 1
#     print(" " * spaces_line + "☆" * stars_count)
# 종료값
# print(" " * spaces_line = 공백 한 칸 x spaces_line)
# print("☆" * starts_count = 별 한 칸 x starts_count)

# 아랫부분 (mid-1 ~ 0)
# for i in range(Flag - 1, -1, -1):
#     spaces_line = Flag - i
#     stars_count = 2 * i + 1
#     print(" " * spaces_line + "☆" * stars_count)
# 시작값, 종료값, 증가값
# print(" " * spaces_line = 공백 한 칸 x spaces_line)
# print("☆" * starts_count = 별 한 칸 x starts_count)

# 이건 코파일럿 while문을 사용
# n = int(input("홀수 줄 수를 입력하세요: "))
# mid = n // 2

# # 위쪽 절반 (0부터 mid까지)
# i = 0
# while i <= mid:
#     # 공백과 별 수 계산
#     spaces = mid - i
#     stars = 2 * i + 1
    
#     # 출력
#     print(" " * spaces + "★" * stars)
    
#     i += 1

# # 아래쪽 절반 (mid-1부터 0까지)
# j = mid - 1
# while j >= 0:
#     spaces = mid - j
#     stars = 2 * j + 1
    
#     print(" " * spaces + "★" * stars)
    
#     j -= 1

# -> 선생님 코드
# wh = 1
# while wh:
#   line = int(input("홀수의 줄 수 입력: "))
#   mid = line // 2 + 1
#   for i in range(1, mid+1):
#     print("_" * (mid-i),end="")
#     print("☆" * (i * 2 - 1))
#   for j in range(mid-1, 0, -1):
#     print("_" * (mid-j),end="")
#     print( "☆" * (j * 2 - 1))
#   wh = int(input("계속(1), 종료(0): "))
# 공백은 "_" 언더바로 표현
# 가장 작은 홀수를 기준으로 잡고 코드를 짜는게 유용한 기법

# -> 선생님 코드 다른 방법
# i,j,num=0,0,1;
# while num:
#   ln = int(input('홀수의 줄 수를 입력 : '))
#   flag=-0; sp = ln//2; st = 1;
#   for i in range (ln):
#     for j in range (sp): print(" ",end="")
#     for j in range (st): print("★",end="")
#     print()
#     if i ==(ln//2): flag=1
#     if flag==0: sp-=1; st+=2
#     else: sp+=1; st-=2
#   num = int(input('0.종료 1.계속 : '))
# flag 기법, 상황을 반전 시킬 때 사용
